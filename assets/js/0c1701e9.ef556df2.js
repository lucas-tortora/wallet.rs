(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[316],{965:function(e,n,a){"use strict";a.r(n),a.d(n,{contentTitle:function(){return c},default:function(){return g},frontMatter:function(){return l},metadata:function(){return u},toc:function(){return p}});var t=a(2122),r=a(9756),s=(a(7294),a(3905)),i=a(8235),o=["components"],l={description:"Official IOTA Wallet Library Software Rust examples.",image:"/img/logo/wallet_light.png",keywords:["account","event","Rust","transfer","backup"]},c=void 0,u={unversionedId:"libraries/rust/examples",id:"libraries/rust/examples",isDocsHomePage:!1,title:"examples",description:"Official IOTA Wallet Library Software Rust examples.",source:"@site/docs/libraries/rust/examples.mdx",sourceDirName:"libraries/rust",slug:"/libraries/rust/examples",permalink:"/docs/libraries/rust/examples",editUrl:"https://github.com/iotaledger/wallet.rs/tree/dev/documentation/docs/libraries/rust/examples.mdx",version:"current",frontMatter:{description:"Official IOTA Wallet Library Software Rust examples.",image:"/img/logo/wallet_light.png",keywords:["account","event","Rust","transfer","backup"]},sidebar:"docs",previous:{title:"Getting Started with Rust",permalink:"/docs/libraries/rust/getting_started"},next:{title:"API Reference",permalink:"/docs/libraries/rust/api_reference"}},p=[{value:"Backup and Restore Example",id:"backup-and-restore-example",children:[]},{value:"Transfer Example:",id:"transfer-example",children:[]},{value:"Events example:",id:"events-example",children:[]},{value:"Logger example:",id:"logger-example",children:[]}],d={toc:p};function g(e){var n=e.components,a=(0,r.Z)(e,o);return(0,s.kt)("wrapper",(0,t.Z)({},d,a,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"examples"},"Examples"),(0,s.kt)("p",null,"You can see the examples in the library's ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/iotaledger/wallet.rs/tree/dev/examples"},"examples directory"),".\nYou can list all available examples by running the following command:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"cargo run --example # lists the available examples\n")),(0,s.kt)("p",null,"To run an example, you can use the following command, replacing ",(0,s.kt)("em",{parentName:"p"},"transfer")," with the desired example:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"cargo run --example transfer # execute the `transfer` example\n")),(0,s.kt)("h2",{id:"backup-and-restore-example"},"Backup and Restore Example"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"Create an account manager and set a password:")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},'let manager = AccountManager::builder().finish().await.unwrap();\n\nmanager.set_stronghold_password("password").await.unwrap();\nmanager.store_mnemonic(SignerType::Stronghold, None).await.unwrap();\n\n')),(0,s.kt)("ol",{start:2},(0,s.kt)("li",{parentName:"ol"},"Create your account:")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},'let client_options = ClientOptionsBuilder::new()\n    .with_node("https://api.lb-0.h.chrysalis-devnet.iota.cafe")?\n    .build()\n    .unwrap();\nlet account_handle = manager\n    .create_account(client_options)?\n    .alias("alias")\n    .initialise()\n    .await?;\nlet id = account_handle.id().await;\n\n')),(0,s.kt)("ol",{start:3},(0,s.kt)("li",{parentName:"ol"},"You can secure your account in a backup file:")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},'// backup the stored accounts to ./backup/${backup_name}\nlet backup_path = manager.backup("./backup").await?;\n\n')),(0,s.kt)("ol",{start:4},(0,s.kt)("li",{parentName:"ol"},"You can import the backup later, or in another application using the following snippet:")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},'manager.import_accounts(backup_path, "password").await?;\n\nlet imported_account_handle = manager.get_account(&id).await?;\n\nlet account = account_handle.read().await;\nlet imported_account = imported_account_handle.read().await;\n\n')),(0,s.kt)("p",null,"That's it! You can now backup and restore your account!"),(0,s.kt)("p",null,"You can see the full code for the example in the ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/iotaledger/wallet.rs/blob/develop/examples/backup_and_restore.rs"},(0,s.kt)("inlineCode",{parentName:"a"},"wallet.rs")," repository")),(0,s.kt)("h2",{id:"transfer-example"},"Transfer Example:"),(0,s.kt)("p",null,"You use the following example to generate an account, and transfer funds. "),(0,s.kt)(i.Z,{className:"language-rust",mdxType:"CodeBlock"},'// Copyright 2020 IOTA Stiftung\n// SPDX-License-Identifier: Apache-2.0\n\n//! cargo run --example transfer --release\n\nuse iota_wallet::{\n    account_manager::AccountManager,\n    address::{parse, OutputKind},\n    client::ClientOptionsBuilder,\n    message::Transfer,\n    signing::SignerType,\n};\nuse std::num::NonZeroU64;\n\n#[tokio::main]\nasync fn main() -> iota_wallet::Result<()> {\n    let manager = AccountManager::builder().finish().await.unwrap();\n    manager.set_stronghold_password("password").await.unwrap();\n\n    // Get account or create a new one\n    let account_alias = "alias";\n    let account = match manager.get_account(account_alias).await {\n        Ok(account) => account,\n        _ => {\n            // first we\'ll create an example account and store it\n            manager.store_mnemonic(SignerType::Stronghold, None).await.unwrap();\n            let client_options = ClientOptionsBuilder::new()\n                .with_node("https://api.lb-0.h.chrysalis-devnet.iota.cafe")?\n                .build()\n                .unwrap();\n            manager\n                .create_account(client_options)?\n                .alias(account_alias)\n                .initialise()\n                .await?\n        }\n    };\n\n    let address = account.generate_address().await?;\n    println!(\n        "Send iotas from the faucet to {} and press enter after the transaction got confirmed",\n        address.address().to_bech32()\n    );\n    let mut input = String::new();\n    std::io::stdin().read_line(&mut input).unwrap();\n    println!("Sending transfer...");\n    let message = account\n        .transfer(\n            Transfer::builder(\n                parse("atoi1qzt0nhsf38nh6rs4p6zs5knqp6psgha9wsv74uajqgjmwc75ugupx3y7x0r")?,\n                NonZeroU64::new(10000000).unwrap(),\n                Some(OutputKind::SignatureLockedDustAllowance),\n            )\n            .finish(),\n        )\n        .await?;\n    println!("Message sent: {}", message.id());\n\n    Ok(())\n}\n'),(0,s.kt)("h2",{id:"events-example"},"Events example:"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"wallet.rs")," library is able to listen to several supported event. As soon as the event occurs, a provided callback will be triggered."),(0,s.kt)("p",null,"You can use the following example to fetch an existing ",(0,s.kt)("em",{parentName:"p"},"Account")," and listen to transaction events related to that ",(0,s.kt)("em",{parentName:"p"},"Account")," :"),(0,s.kt)(i.Z,{className:"language-rust",mdxType:"CodeBlock"},'// Copyright 2020 IOTA Stiftung\n// SPDX-License-Identifier: Apache-2.0\n\n//! cargo run --example event --release\n\nuse iota_wallet::{\n    account_manager::AccountManager, address::Address, client::ClientOptionsBuilder, event::on_balance_change,\n    message::MessageId, signing::SignerType, Result,\n};\nuse serde::Deserialize;\nuse std::str::FromStr;\n\n#[tokio::main]\nasync fn main() -> Result<()> {\n    let manager = AccountManager::builder().finish().await?;\n    manager.set_stronghold_password("password").await?;\n    manager.store_mnemonic(SignerType::Stronghold, None).await?;\n\n    // first we\'ll create an example account and store it\n    let client_options = ClientOptionsBuilder::new()\n        .with_node("https://api.lb-0.h.chrysalis-devnet.iota.cafe")?\n        .build()?;\n\n    let account = manager\n        .create_account(client_options)?\n        .alias("alias")\n        .initialise()\n        .await?;\n\n    // Possible events are: on_balance_change, on_broadcast, on_confirmation_state_change, on_error,\n    // on_migration_progress, on_new_transaction, on_reattachment, on_stronghold_status_change,\n    // on_transfer_progress,\n    on_balance_change(move |event| {\n        println!("BalanceEvent: {:?}", event);\n        println!("Press enter to exit");\n    })\n    .await;\n\n    let address = account.generate_address().await?;\n    println!("Requesting funds from the faucet to {}", address.address().to_bech32());\n    get_funds(&address).await?;\n\n    // Wait for event before exit\n    let mut exit = String::new();\n    std::io::stdin().read_line(&mut exit).unwrap();\n    Ok(())\n}\n\n#[derive(Deserialize)]\nstruct FaucetMessageResponse {\n    id: String,\n}\n\n#[derive(Deserialize)]\nstruct FaucetResponse {\n    data: FaucetMessageResponse,\n}\n\nasync fn get_funds(address: &Address) -> Result<MessageId> {\n    // use the faucet to get funds on the address\n    let response = reqwest::get(&format!(\n        "https://faucet.chrysalis-devnet.iota.cafe/api?address={}",\n        address.address().to_bech32()\n    ))\n    .await\n    .unwrap()\n    .json::<FaucetResponse>()\n    .await\n    .unwrap();\n    let faucet_message_id = MessageId::from_str(&response.data.id)?;\n\n    println!("Got funds from faucet, message id: {:?}", faucet_message_id);\n\n    Ok(faucet_message_id)\n}\n'),(0,s.kt)("h2",{id:"logger-example"},"Logger example:"),(0,s.kt)(i.Z,{className:"language-rust",mdxType:"CodeBlock"},'// Copyright 2020 IOTA Stiftung\n// SPDX-License-Identifier: Apache-2.0\n\n//! cargo run --example logger --release\n\nuse iota_client::common::logger::{logger_init, LoggerConfig, LoggerOutputConfigBuilder};\nuse iota_wallet::{account_manager::AccountManager, client::ClientOptionsBuilder, signing::SignerType};\nuse log::LevelFilter;\nuse std::time::Instant;\n\n#[tokio::main]\nasync fn main() -> iota_wallet::Result<()> {\n    // Generates a wallet.log file with logs for debugging\n    let output_config = LoggerOutputConfigBuilder::new()\n        .name("wallet.log")\n        .level_filter(LevelFilter::Debug);\n    let config = LoggerConfig::build().with_output(output_config).finish();\n    logger_init(config).unwrap();\n\n    let manager = AccountManager::builder()\n        .with_storage("./backup", None)?\n        .with_skip_polling()\n        .finish()\n        .await?;\n    manager.set_stronghold_password("password").await?;\n\n    // Get account or create a new one\n    let account_alias = "logger";\n    let account = match manager.get_account(account_alias).await {\n        Ok(account) => account,\n        _ => {\n            // first we\'ll create an example account and store it\n            manager.store_mnemonic(SignerType::Stronghold, None).await.unwrap();\n            let client_options = ClientOptionsBuilder::new()\n                .with_node("https://api.lb-0.h.chrysalis-devnet.iota.cafe")?\n                .build()\n                .unwrap();\n            manager\n                .create_account(client_options)?\n                .alias(account_alias)\n                .initialise()\n                .await?\n        }\n    };\n\n    let now = Instant::now();\n    account.sync().await.execute().await?;\n    println!("Syncing took: {:.2?}", now.elapsed());\n\n    println!("Balance: {:?}", account.balance().await?);\n\n    let addresses = account.list_unspent_addresses().await?;\n    println!("Addresses: {}", addresses.len());\n\n    let address = account.generate_address().await?;\n    println!("Generated a new address: {:?}", address);\n\n    Ok(())\n}\n'))}g.isMDXComponent=!0}}]);